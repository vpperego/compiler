#include "genco.h"

TAC* makeFuncDec(TAC* type, TAC* params, TAC* cmdBlock, HASH_NODE *symbol);
TAC* makeIfThen(TAC* code0, TAC* code1);
TAC* makeIfThenElse(TAC* code0, TAC* code1, TAC* code2);
TAC* makeWhile(TAC* code0, TAC* code1);
TAC* makeFuncDef(TAC* type, TAC* params, TAC* cmdBlock, HASH_NODE *symbol);
TAC* tacGenerateNot(int type, TAC* op1);
TAC* tacGenerateOp(int type, TAC* op1, TAC* op2);

TAC * tacCreate(int type, HASH_NODE * res, HASH_NODE * op1, HASH_NODE * op2){
  TAC * newtac = (TAC *) calloc(1,sizeof(TAC));
  newtac->type = type;
  newtac->res = res;
  newtac->op1 = op1;
  newtac->op2 = op2;
  newtac->prev = 0;
  newtac->next = 0;
  return newtac;
}

TAC * tacJoin(TAC *l1, TAC *l2){
  TAC * tac;
  if (!l1) return l2;
  if (!l2) return l1;
  tac = l2;
  while(tac->prev){
    tac = tac->prev;
  }
  tac->prev = l1;
 // l1->next = l2; 

  return l2;
}

TAC* tacReverse(TAC* tac)
{
  if(!tac){
    fprintf(stderr, "tes");
    return NULL;
  }
	TAC* t;
	for(t = tac; t->prev; t = t->prev)
		t->prev->next = t;
	return t;
}

void tacPrintFoward(TAC* first)
{
	fprintf(stderr, "\n ---Imprimindo codigo gerado---\n");
	
	TAC *tac;

	for(tac = first; tac; tac = tac->next){
		tacPrintSingle(tac);
	}
	
}

void tacPrintSingle(TAC *tac){
  if (!tac) {
    return;
  }
  TAC* tacPrint = tac;
  
  fprintf(stderr, "TAC(" );
  switch (tacPrint->type) {
    case TAC_SYMBOL:  fprintf(stderr,"TAC_SYMBOL "); break;
    case TAC_ADD:  fprintf(stderr,"TAC_ADD "); break;
    case TAC_SUB:  fprintf(stderr,"TAC_SUB "); break;
    case TAC_MUL:  fprintf(stderr,"TAC_MUL "); break;
    case TAC_DIV:  fprintf(stderr, "TAC_DIV "); break;
    case TAC_LESS: fprintf(stderr, "TAC_LESS "); break;
    case TAC_MORE: fprintf(stderr, "TAC_MORE "); break;
    case TAC_NOT:  fprintf(stderr, "TAC_NOT "); break;
    case TAC_LE: fprintf(stderr, "TAC_LE "); break;
    case TAC_GE: fprintf(stderr, "TAC_GE "); break;
    case TAC_EQ: fprintf(stderr, "TAC_EQ "); break;
    case TAC_NE: fprintf(stderr, "TAC_NE "); break;
    case TAC_AND: fprintf(stderr, "TAC_AND "); break;
    case TAC_OR: fprintf(stderr, "TAC_OR "); break;
    case TAC_FUNC: fprintf(stderr, "TAC_FUNC "); break;
    case TAC_INIT_ARRAY: fprintf(stderr, "TAC_INIT_ARRAY "); break;
    case TAC_ARRAY_INIT_VALUES: fprintf(stderr, "TAC_ARRAY_INIT_VALUES "); break;
    case TAC_ARRAY: fprintf(stderr, "TAC_ARRAY "); break;
    case TAC_ATRIB: fprintf(stderr, "TAC_ATRIB "); break;
    case TAC_ATRIB_ARRAY: fprintf(stderr, "TAC_ATRIB_ARRAY "); break;
    case TAC_READ: fprintf(stderr, "TAC_READ "); break;
    case TAC_PRINT: fprintf(stderr, "TAC_PRINT "); break;
    case TAC_RETURN: fprintf(stderr, "TAC_RETURN "); break;
    case TAC_LIST_PARAM: fprintf(stderr, "TAC_LIST_PARAM "); break;
    case TAC_PARAM: fprintf(stderr, "TAC_PARAM "); break;
    case TAC_ARG_ID: fprintf(stderr, "TAC_ARG_ID "); break;
    case TAC_LIST_ARG: fprintf(stderr, "TAC_LIST_ARG "); break;
    case TAC_ARG: fprintf(stderr, "TAC_ARG "); break;
    case TAC_VARDEC: fprintf(stderr, "TAC_VARDEC "); break;
    case TAC_FUNDEC: fprintf(stderr, "TAC_FUNDEC "); break;
    case TAC_BEGIN_FUN: fprintf(stderr, "TAC_BEGIN_FUN "); break;
    case TAC_END_FUN: fprintf(stderr, "TAC_END_FUN "); break;
    case TAC_JMP: fprintf(stderr, "TAC_JMP "); break;
    case TAC_IFZ: fprintf(stderr, "TAC_IFZ "); break;
    case TAC_MOVE: fprintf(stderr, "TAC_MOVE "); break;
    case TAC_LABEL: fprintf(stderr, "TAC_LABEL"); break;
    default: fprintf(stderr, "TAC_UNKNOWN "); break;
  }

  if(tacPrint->res && tacPrint->res->text ) fprintf(stderr, "%s\n",tacPrint->res->text ); else fprintf(stderr, ", null" );
  if(tacPrint->op1 && tacPrint->op1->text) fprintf(stderr, "%s\n",tacPrint->op1->text ); else fprintf(stderr, ", null" );
  if(tacPrint->op2 && tacPrint->op2->text) fprintf(stderr, "%s\n",tacPrint->op2->text ); else fprintf(stderr, ", null" );
  fprintf(stderr, ")\n");
  
}



void tacPrintBack(TAC * last){
  TAC * tac;
  for ( tac = last; tac; tac = tac->prev) {
     tacPrintSingle(tac);
  }
}

TAC* tacGenerator(AST * node){
  int i;

  TAC *code[MAX_SONS];
  if (!node) return 0;

  for (i = 0; i < MAX_SONS; i++) {
    code[i] = tacGenerator(node->son[i]);
  }
 
  //TAC * tacCreate(int type, HASH_NODE * res, HASH_NODE * op1, HASH_NODE * op2) Just to remind the order of parameters
  switch (node->type) {
    case AST_SYMBOL: return tacCreate(TAC_SYMBOL, node->symbol, 0, 0); break;
    case AST_ADD:  return tacGenerateOp(TAC_ADD, code[0], code[1]); break;
    case AST_SUB:  return tacGenerateOp(TAC_SUB, code[0], code[1]); break;
    case AST_MUL:  return tacGenerateOp(TAC_MUL, code[0], code[1]); break;
    case AST_DIV:  return tacGenerateOp(TAC_DIV, code[0], code[1]); break;
    case AST_LESS: return tacGenerateOp(TAC_LESS, code[0], code[1]); break;
    case AST_MORE: return tacGenerateOp(TAC_MORE, code[0], code[1]); break;
    case AST_LE:   return tacGenerateOp(TAC_LE, code[0], code[1]); break;
    case AST_GE:   return tacGenerateOp(TAC_GE, code[0], code[1]); break;
    case AST_EQ:   return tacGenerateOp(TAC_EQ, code[0], code[1]); break;
    case AST_NE:   return tacGenerateOp(TAC_NE, code[0], code[1]); break;
    case AST_AND:  return tacGenerateOp(TAC_AND, code[0], code[1]); break;
    case AST_OR:   return tacGenerateOp(TAC_OR, code[0], code[1]); break;
    case AST_NOT:  return tacGenerateNot(TAC_NOT, code[0]); break;
    case AST_FUNC: return tacJoin(code[0], tacCreate(TAC_FUNC, makeTemp(), node->symbol, 0)); break;
    case AST_INIT_ARRAY:  return tacJoin(code[2],tacCreate(TAC_INIT_ARRAY,node->symbol,code[1]?code[1]->res:0,0));
//    case AST_ARRAY_INIT_VALUES: break;
    case AST_ARRAY: return tacJoin(code[0],tacCreate(TAC_ARRAY, node->symbol, 0, 0)); break;
    case AST_ATRIB: return tacJoin(code[0], tacCreate(TAC_MOVE, node->symbol, code[0]?code[0]->res:0, 0)); break;
    case AST_ATRIB_ARRAY: return tacJoin(tacJoin(code[0],code[1]),
          tacCreate(TAC_MOV_IND,node->symbol,code[0]?code[0]->res:0,code[1]?code[1]->res:0)); break;
    case AST_READ: return tacCreate(TAC_READ, node->symbol, 0, 0); break;
    case AST_PRINT: return tacJoin(code[0], tacCreate(TAC_PRINT, 0,0,0)); break;
    case AST_RETURN: return tacJoin(code[0], tacCreate(TAC_RETURN, node->symbol, 0, 0)); break;
    case AST_IF: return makeIfThen(code[0], code[1]); break;
    case AST_IF_ELSE: return makeIfThenElse(code[0], code[1], code[2]); break;
    case AST_WHILE: return makeWhile(code[0], code[1]); break;
  //  case AST_LIST_PARAM: return tacJoin(tacJoin(code[0], tacCreate(TAC_PARAM, code[0]? code[0]->res : 0, 0, 0)), code[1]); break;
//    case AST_PARAM: return tacCreate(TAC_PARAM, code[0]->res, 0, 0); break;
    case AST_ARG_ID: return tacJoin(code[0],tacCreate(TAC_ARG_ID, node->symbol, 0, 0)); break;
 //   case AST_LIST_ARG: break;
    //case AST_ARG: break;
    case AST_VARDEC: return tacJoin(code[0], tacCreate(TAC_MOVE, node->symbol, code[1]->res, 0)); break;
    case AST_FUNDEC: return makeFuncDec(code[0],code[1],code[2],node->symbol); break;
		case AST_INTEGER: return tacCreate(TAC_INTEGER, node->symbol, 0, 0);break;
		case AST_REAL: return tacCreate(TAC_REAL, node->symbol, 0, 0);break;
		case AST_CHAR: return tacCreate(TAC_CHAR, node->symbol, 0, 0);break;
    default: 
       return tacJoin(tacJoin(tacJoin(code[0],code[1]),code[2]),code[3]);
      break;
    }
}




TAC* tacGenerateNot(int type, TAC* op1){
    return tacJoin(op1, tacCreate(type, makeTemp(), op1?op1->res:0, 0));
}


TAC* tacGenerateOp(int type, TAC* op1, TAC* op2){
    return tacJoin(tacJoin(op1,op2),
									 tacCreate(type, makeTemp(), op1?op1->res:0, op2?op2->res:0));
//op1,
  //              tacJoin(op2, tacCreate(type, makeTemp(), op1?op1->res:0, op2?op2->res:0)));
}


TAC* makeIfThen(TAC* code0, TAC* code1) {
  TAC *iftac, *labeltac;
  HASH_NODE* newlabel = makeLabel();
  iftac = tacCreate(TAC_IFZ, newlabel,code0?code0->res:0,0);
  labeltac = tacCreate(TAC_LABEL, newlabel, 0,0);
  return tacJoin(tacJoin(tacJoin(code0,iftac),code1),labeltac);
}

TAC* makeIfThenElse(TAC* code0, TAC* code1, TAC* code2) {
  TAC *iftac, *jumptac, *labeltac, *labeltac2;
  HASH_NODE *newlabel, *newlabel2;
  newlabel = makeLabel();
  newlabel2 = makeLabel();
  iftac = tacCreate(TAC_IFZ, newlabel,code0?code0->res:0,0);
  labeltac = tacCreate(TAC_LABEL, newlabel, 0,0);
  jumptac = tacCreate(TAC_JMP, newlabel2, 0, 0);
  labeltac2 = tacCreate(TAC_LABEL, newlabel2, 0,0);
  return tacJoin(tacJoin(tacJoin(tacJoin(tacJoin(tacJoin(code0,iftac),code1),jumptac),labeltac),code2),labeltac2);
}

TAC* makeWhile(TAC* code0, TAC* code1) {
  TAC *iftac, *jumptac, *labeltac, *labeltac2, *movetac;
  HASH_NODE *newlabel, *newlabel2;
  newlabel = makeLabel();
  newlabel2 = makeLabel();
  iftac = tacCreate(TAC_IFZ, newlabel,code0?code0->res:0,0);
  labeltac = tacCreate(TAC_LABEL, newlabel, 0,0);
  jumptac = tacCreate(TAC_JMP, newlabel2, 0, 0);
  labeltac2 = tacCreate(TAC_LABEL, newlabel2, 0,0);
  return tacJoin(tacJoin(tacJoin(tacJoin(tacJoin(labeltac2,code0),iftac),code1),jumptac),labeltac);
}

TAC* makeFuncDec(TAC* type, TAC* params, TAC* cmdBlock, HASH_NODE *symbol) {
  TAC* beginf = tacCreate(TAC_BEGIN_FUN, symbol, 0, 0);
  TAC* endf = tacCreate(TAC_END_FUN, symbol, 0, 0);

  return tacJoin(tacJoin(tacJoin(tacJoin(type,params),beginf), cmdBlock), endf);
}
